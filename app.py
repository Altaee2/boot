# =========================
# --- ุงูุฃุฏูุงุช ุงููุงุฒูุฉ ---
# =========================
import telebot
import requests
import gdshortener
import re
import zipfile
from io import BytesIO
import json
import os
import threading
import time
from telebot import types
# ุงุณุชูุฑุงุฏ ุงูุฃุฏูุงุช ุงููุงุฒูุฉ ูุฅูุดุงุก ุงูุฃุฒุฑุงุฑ ุงููุถููุฉ (Inline Keyboard)
from telebot.types import InlineKeyboardButton as Btn, InlineKeyboardMarkup as Mak
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
from pytz import timezone # ๐ ุงุณุชูุฑุงุฏ ููุชุจุฉ pytz ููููุทูุฉ ุงูุฒูููุฉ

# =========================
# --- ุงูุฅุนุฏุงุฏุงุช ุงูุซุงุจุชุฉ ูุงููุฏูุฌุฉ ---
# =========================
TOKEN = "7631796128:AAFOUcS1aolCyUUZp-ndLYlH4-U4uxTlFgU" 
DEVELOPER_ID = 6454550864 
CHANNEL_ID = "@xx28z"   
CHANNEL_URL = "my00002.t.me"
DATE_FORMAT = '%Y %m %d'
LOG_FILE = 'user_ids.txt'

# ุฅุนุฏุงุฏุงุช ูุงุฆูุฉ ุงูููุงู (TODO List)
DATA_FILE = "tasks_data.json"
LOCK = threading.Lock() 

# ๐ ุฅุนุฏุงุฏุงุช ุงูููุทูุฉ ุงูุฒูููุฉ ูุจุบุฏุงุฏ
BAGHDAD_TIMEZONE = timezone('Asia/Baghdad') 

# --- ุชููุฆุฉ ุงูุจูุช ูููุงุนุฏ ุงูุจูุงูุงุช ุงููุคูุชุฉ ---
bot = telebot.TeleBot(TOKEN, parse_mode='HTML')
user_data = {}
user_ratings = {}
channel_keyboard = Mak().add(Btn("ููุงุชู", url=CHANNEL_URL))

# ูุงููุณ ูุญูุธ ุญุงูุฉ ุงููุณุชุฎุฏู ูุฅุถุงูุฉ ูููุฉ
# {user_id: True/False}
adding_task_state = {} 

# =========================
# 1. ุฏูุงู ูุณุงุนุฏุฉ ููุชุณุฌูู
# =========================
def log_new_user(message):
    """ุชุณุฌูู ุงููุณุชุฎุฏู ุงูุฌุฏูุฏ ูุฅุฑุณุงู ุฅุดุนุงุฑ ูููุทูุฑ."""
    user_id = message.from_user.id
    first_name = message.from_user.first_name

    if not os.path.exists(LOG_FILE) or str(user_id) not in open(LOG_FILE).read():
        user_data[user_id] = None
        notification_message = (
            f"ูุณุชุฎุฏู ุฌุฏูุฏ ุจุฏุฃ ุงูุจูุช: "
            f"[{first_name}](tg://user?id={user_id})ุ ุงููุนุฑูู: `{user_id}`"
        )
        bot.send_message(
            DEVELOPER_ID,
            notification_message,
            parse_mode="Markdown"
        )
        with open(LOG_FILE, 'a') as file:
            file.write(f'{user_id}\n')


# =========================
# 2. ุฏูุงู ุฌูุจ ูุนูููุงุช ุงูููุช ูุงูุชุงุฑูุฎ (ุฌุฏูุฏ)
# =========================
def get_hijri_date():
    """ูุฌูุจ ุงูุชุงุฑูุฎ ุงููุฌุฑู ูู ูููุน ุงูุณูุฏ ุงูุณูุณุชุงูู."""
    url = "https://www.sistani.org"
    headers = {
      'User-Agent': "Mozilla/5.0 (Linux; Android 11) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.0.0 Mobile Safari/537.36",
    }
    try:
        # ุชุญุฏูุฏ ูููุฉ ุฒูููุฉ ููุทูุจ ูููุน ุชููู ุงูุจูุช
        response = requests.get(url, headers=headers, timeout=5) 
        response.raise_for_status() 
        
        # ุงูุจุญุซ ุนู ุงูุชุงุฑูุฎ ุงููุฌุฑู ุจุงุณุชุฎุฏุงู ุงูุชุนุจูุฑ ุงููุธุงูู
        res = re.search(r'style="margin-left:9px;">([^<]+)</span>', response.text)
        if res:
            # ุชูุธูู ูุฅุฑุฌุงุน ุงูุชุงุฑูุฎ ุงููุฌุฑู
            return res.group(1).strip()
        else:
            return "ุบูุฑ ูุชููุฑ"
    except Exception:
        # ุฅุฑุฌุงุน ุฑุณุงูุฉ ุฎุทุฃ ูู ุญุงูุฉ ูุดู ุงูุฌูุจ
        return "ุบูุฑ ูุชููุฑ"

def get_current_info():
    """ุชูุณูู ุฑุณุงูุฉ ุงูุชุฑุญูุจ ุจูุนูููุงุช ุงูููุช ูุงูุชุงุฑูุฎ (ุจุบุฏุงุฏ)."""
    # ุฌูุจ ุงูููุช ุงูุญุงูู ุจุชูููุช ุจุบุฏุงุฏ
    now = datetime.now(BAGHDAD_TIMEZONE)
    
    # ุชูุณูู ุงูุชุงุฑูุฎ ุงููููุงุฏู ูุงูููู ูุงูุณุงุนุฉ
    date_gregorian = now.strftime('%Y/%m/%d')
    time_now = now.strftime('%I:%M %p') # ุชูุณูู ุงูุณุงุนุฉ 12
    day_name = now.strftime('%A')
    
    # ุชุนุฑูุจ ุฃุณูุงุก ุงูุฃูุงู
    day_names_ar = {
        'Sunday': 'ุงูุฃุญุฏ', 'Monday': 'ุงูุฅุซููู', 'Tuesday': 'ุงูุซูุงุซุงุก', 
        'Wednesday': 'ุงูุฃุฑุจุนุงุก', 'Thursday': 'ุงูุฎููุณ', 'Friday': 'ุงูุฌูุนุฉ', 'Saturday': 'ุงูุณุจุช'
    }
    day_name_ar = day_names_ar.get(day_name, day_name)
    
    # ุฌูุจ ุงูุชุงุฑูุฎ ุงููุฌุฑู
    hijri_date = get_hijri_date()
    
    # ุจูุงุก ุฑุณุงูุฉ ุงูุชุฑุญูุจ ูุงููุนูููุงุช
    info_message = (
        f"<b>ุฃููุงู ุจู ุนุฒูุฒู ุงููุณุชุฎุฏู!</b> ๐\n"
        f"ุฃูุง ููุง ููุณุงุนุฏุชู ูู ูุฌููุนุฉ ูู ุงูุฎุฏูุงุช ุงููููุฒุฉ.\n\n"
        f"<b>๐๏ธ ูุนูููุงุช ุงูููุช ูุงูุชุงุฑูุฎ (ุจุบุฏุงุฏ):</b>\n"
        f"โข <b>ุงูููู:</b> {day_name_ar}\n"
        f"โข <b>ุงูุชุงุฑูุฎ ุงููุฌุฑู:</b> {hijri_date}\n"
        f"โข <b>ุงูุชุงุฑูุฎ ุงููููุงุฏู:</b> {date_gregorian}\n"
        f"โข <b>ุงูููุช ุงูุญุงูู:</b> {time_now}\n\n"
        f"<b>ุงุฎุชุฑ ุงูุฎุฏูุฉ ุงูุชู ุชุฑูุฏูุง ูู ุงููุงุฆูุฉ ุจุงูุฃุณูู:</b>"
    )
    return info_message


# =========================
# 3. ุฃูุงูุฑ ุงูุจุฏุงูุฉ ูุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ
# =========================
@bot.message_handler(commands=['start'])
def main_menu(message):
    log_new_user(message)
    
    # ๐ ุฌูุจ ุฑุณุงูุฉ ุงูุชุฑุญูุจ ูุงููุนูููุงุช ุงูุฌุฏูุฏุฉ
    welcome_message = get_current_info()
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("๐ ุงููุฑุขู ุงููุฑูู", "โ ุฌุฏูู ุงูุถุฑุจ", "๐ ูู ุถุบุท ZIP") 
    markup.add("๐ ุงุฎุชุตุงุฑ ุฑุงุจุท", "๐ฌ ุชุญููู ุชูู ุชูู", "๐ ูุงุฆูุฉ ุงูููุงู")
    markup.add("๐ค ุงุณุฃู ChatGPT", "๐ ุงููุฑู ุจูู ุชุงุฑูุฎูู", "๐ ุงูุชุนุฑู ุนูู ุณูุงุฑุฉ")
    markup.add("โน๏ธ ูุนูููุงุช / ุชุฑุญูุจ") # ๐ ุฅุถุงูุฉ ุฒุฑ ุงููุนูููุงุช
    
    bot.send_message(
        message.chat.id,
        welcome_message,
        reply_markup=markup,
        parse_mode='HTML'
    )


# =========================
# 4. ุฎุฏูุฉ ุงููุฑุขู ุงููุฑูู
# =========================
def send_quran_page(chat_id, num):
    """ุฅุฑุณุงู ุตูุฑุฉ ูุตูุญุฉ ูุนููุฉ ูู ุงููุฑุขู."""
    try:
        num = int(num)
        if not (1 <= num <= 604): 
            bot.send_message(chat_id, "โ ุฑูู ุงูุตูุญุฉ ูุฌุจ ุฃู ูููู ุจูู 1 ู 604.")
            return

        url = f"https://quran.ksu.edu.sa/png_big/{num}.png"
        keyboard = types.InlineKeyboardMarkup()
        keyboard.row(
            types.InlineKeyboardButton(text=f"โข ุตูุญุฉ {num} โข", callback_data="couu"),
        )
        keyboard.row(
            types.InlineKeyboardButton(text="โ ุตูุญุฉ ุงูุณุงุจูุฉ", callback_data=f"quran|{num - 1}"),
            types.InlineKeyboardButton(text="ุตูุญุฉ ุงูุชุงููุฉ โถ", callback_data=f"quran|{num + 1}"),
        )
        bot.send_photo(chat_id, url, reply_markup=keyboard)
    except ValueError:
        bot.send_message(chat_id, "โ ูุฑุฌู ุฅุฑุณุงู ุฑูู ุตูุญุฉ ุตุญูุญ.")
    except Exception as e:
        bot.send_message(chat_id, f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุญููู ุงูุตูุญุฉ: {e}")


# =========================
# 5. ุฎุฏูุฉ ุฌุฏูู ุงูุถุฑุจ
# =========================
def multiplication_table(n):
    """ุญุณุงุจ ุฌุฏูู ุงูุถุฑุจ ูุฑูู ูุนูู."""
    return "\n".join([f"{n} ร {i} = {n*i}" for i in range(1, 11)])

# =========================
# 6. ุฎุฏูุฉ ุงุฎุชุตุงุฑ ุงูุฑูุงุจุท ูุชูููู ุงูุจูุช
# =========================
def shorten_link(url):
    """ุงุณุชุฎุฏุงู gdshortener ูุงุฎุชุตุงุฑ ุฑุงุจุท."""
    s = gdshortener.ISGDShortener()
    return s.shorten(url)[0]

def handle_shortener(message):
    """ูุนุงูุฌ ุงูุฎุทูุฉ ุงูุซุงููุฉ ูุงุฎุชุตุงุฑ ุงูุฑุงุจุท."""
    url = message.text.strip()
    if re.search(r"https?://[^\s]+", url):
        try:
            short = shorten_link(url)
            bot.reply_to(message, f"โ ุชู ุงุฎุชุตุงุฑ ุงูุฑุงุจุท:\n`{short}`\n\nโญ ูููู ุงูุจูุช ุจุฅุฑุณุงู ุฑูู ูู 1 ุฅูู 5", parse_mode="MARKDOWN")
            bot.register_next_step_handler(message, rate_bot)
        except Exception:
             bot.reply_to(message, "โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ูุญุงููุฉ ุงูุงุฎุชุตุงุฑ. ุชุฃูุฏ ุฃู ุงูุฑุงุจุท ุตุญูุญ.")
    else:
        bot.reply_to(message, "โ ูุฐุง ููุณ ุฑุงุจุท ุตุงูุญ.")

def rate_bot(message):
    """ูุนุงูุฌ ูุชูููู ุงูุจูุช."""
    try:
        rating = int(message.text)
        if 1 <= rating <= 5:
            user_ratings[message.from_user.id] = rating
            username = message.from_user.username or message.from_user.first_name
            
            bot.send_message(
                CHANNEL_ID,
                f"โญ ุชูููู ุฌุฏูุฏ!\n- ุงููุณุชุฎุฏู: @{username} (ID: `{message.from_user.id}`)\n- ุงูุชูููู: {rating}/5",
                parse_mode="HTML"
            )
            bot.reply_to(message, f"โ ุดูุฑุงู ูุชููููู {rating}โญ")
        else:
            bot.reply_to(message, "โ ุฃุฑุณู ุฑูู ูู 1 ุฅูู 5 ููุท.")
    except ValueError:
        bot.reply_to(message, "โ ุฃุฑุณู ุฑูู ุตุงูุญ.")


# =========================
# 7. ุฎุฏูุฉ ุชุญููู ุชูู ุชูู
# =========================
def download_tiktok(url):
    """ุฌูุจ ุฑุงุจุท ุชุญููู ููุฏูู ุชูู ุชูู."""
    headers = {
        "referer": "https://lovetik.com/sa/video/",
        "origin": "https://lovetik.com",
        "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    }
    payload = {"query": url}
    r = requests.post("https://lovetik.com/api/ajax/search", headers=headers, data=payload).json()
    return r["links"][2]["a"]

def handle_tiktok(message):
    """ูุนุงูุฌ ุงูุฎุทูุฉ ุงูุซุงููุฉ ูุชุญููู ุชูู ุชูู."""
    try:
        vurl = download_tiktok(message.text.strip())
        caption = "โ ุชู ุชุญููู ุงูููุฏูู ุจูุฌุงุญ.\n\n๐ค ุญููู ุงูุจูุช: @altaee_z\n๐ ูููุนู: www.ali-Altaee.free.nf"
        bot.send_video(message.chat.id, vurl, caption=caption)
    except Exception:
        bot.reply_to(message, "- ุนุฐุฑุงู ุงูุฑุงุจุท ุบูุฑ ุตุงูุญ ุฃู ูุง ูููู ุชุญููู ุงูููุฏูู!")


# =========================
# 8. ุฎุฏูุฉ ChatGPT API
# =========================
def ask_gpt(question):
    """ุฅุฑุณุงู ุณุคุงู ุฅูู ChatGPT."""
    r = requests.get(
        f"https://chatgpt.apinepdev.workers.dev/?question={requests.utils.quote(question)}"
    ).json()
    ans = r["answer"]
    ans = ans.replace("๐ Join our community: [t.me/nepdevsz](https://t.me/nepdevsz)", "")
    return ans + "\n\n๐ค ุชูุฌุฑุงู :- @altaee_z\n๐ ูููุนู : www.ali-Altaee.free.nf"

def handle_gpt(message):
    """ูุนุงูุฌ ุงูุฎุทูุฉ ุงูุซุงููุฉ ูู ChatGPT."""
    try:
        bot.send_chat_action(message.chat.id, 'typing')
        answer = ask_gpt(message.text.strip())
        bot.reply_to(message, answer)
    except Exception:
        bot.reply_to(message, "โ ุนุฐุฑุงูุ ูู ุฃุชููู ูู ุงูุญุตูู ุนูู ุฅุฌุงุจุฉ ุงูุขู. ูุฑุฌู ุงููุญุงููุฉ ูุงุญูุงู.")

# =========================
# 9. ุฎุฏูุฉ ุงูุชุนุฑู ุนูู ุณูุงุฑุฉ
# =========================
def recognize_car(info_url: str):
    """ุฅุฑุณุงู ุฑุงุจุท ุงูุตูุฑุฉ ุฅูู ูููุน carnet.ai ูุงูุชุนุฑูู ุนูู ุจูุงูุงุช ุงูุณูุงุฑุฉ"""
    url = "https://carnet.ai/recognize-url"
    headers = {
        'Accept': '*/*',
        'Accept-Language': 'ar-EG,ar;q=0.9,en-US;q=0.8,en;q=0.7',
        'Connection': 'keep-alive',
        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
        'Origin': 'https://carnet.ai',
        'User-Agent': 'Mozilla/5.0 (Linux; Android 12) AppleWebKit/537.36 '
                      '(KHTML, like Gecko) Chrome/105.0.0.0 Mobile Safari/537.36',
        'X-Requested-With': 'XMLHttpRequest',
    }
    r = requests.post(url, headers=headers, data=info_url)
    return r.json()
def handle_car_photo(message):
    """ุงุณุชูุจุงู ุตูุฑุฉ ุงููุณุชุฎุฏู ูุฅุฑุณุงู ูุนูููุงุช ุงูุณูุงุฑุฉ"""
    if not message.photo:
        bot.reply_to(message, "โ ูุฑุฌู ุฅุฑุณุงู ุตูุฑุฉ ูููุณ ูุตุงู.")
        return

    file_id = message.photo[-1].file_id
    file_info = bot.get_file(file_id)
    file_url = f"https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}"

    result = recognize_car(file_url)
    if 'error' in result:
        bot.reply_to(message, "โ ูู ุฃุณุชุทุน ุงูุชุนุฑู ุนูู ุงูุณูุงุฑุฉ!")
        return

    carname = result['car']['make']
    carmodel = result['car']['model']
    years = result['car']['years']
    angle = result['angle']['name']
    color = result['color']['name']

    reply = (
        "โ ุชู ุงูุชุนุฑู ุนูู ุงูุณูุงุฑุฉ:\n"
        f"โข ุงูุดุฑูุฉ ุงููุตูุนุฉ: {carname}\n"
        f"โข ุงูููุฏูู: {carmodel}\n"
        f"โข ุณูุฉ ุงูุฅุตุฏุงุฑ: {years}\n"
        f"โข ุงูููู: {color}\n"
        f"โข ุฒุงููุฉ ุงูุชุตููุฑ: {angle}\n\n"
        "๐ค ุญููู ุงูุชุทููุฑ: @altaee_z\n"
        "๐ ูููุนู: www.ali-Altaee.free.nf"
    )
    bot.reply_to(message, reply)    


# =========================
# 10. ุฏูุงู ุงููุฑู ุจูู ุชุงุฑูุฎูู
# =========================
def get_date_one(message):
    """ูุณุชูู ุงูุชุงุฑูุฎ ุงูุฃูู ููุทูุจ ุงูุชุงุฑูุฎ ุงูุซุงูู."""
    try:
        date_one = datetime.strptime(message.text.strip(), DATE_FORMAT)
        user_data[message.from_user.id] = date_one
        
        response_message = (
            f"ุญุณูุงูุ ุชู ุงุณุชูุงู ุงูุชุงุฑูุฎ ุงูุฃูู: `{message.text.strip()}` โ\n"
            f"ุงูุขู ุฃุฑุณู **ุงูุชุงุฑูุฎ ุงูุซุงูู** ุจููุณ ุงูุตูุบุฉ."
        )
        bot.reply_to(message, response_message, parse_mode="Markdown")
        bot.register_next_step_handler(message, calculate_difference)
        
    except ValueError:
        error_message = (
            "ุนุฐุฑุงู! ูุจุฏู ุฃู ุตูุบุฉ ุงูุชุงุฑูุฎ ุบูุฑ ุตุญูุญุฉ โ. \n"
            "ุงูุฑุฌุงุก ุฅุฑุณุงู ุงูุชุงุฑูุฎ ุจุงูุตูุบุฉ ุงููุทููุจุฉ: `ุงูุณูุฉ ุงูุดูุฑ ุงูููู`."
        )
        bot.reply_to(message, error_message)
        bot.register_next_step_handler(message, get_date_one)


def calculate_difference(message):
    """ูุณุชูู ุงูุชุงุฑูุฎ ุงูุซุงูู ููุญุณุจ ุงููุฑู ุจูู ุงูุชุงุฑูุฎูู."""
    user_id = message.from_user.id
    
    if user_id not in user_data or user_data[user_id] is None:
        bot.reply_to(message, "ุนุฐุฑุงูุ ูู ุฃุฌุฏ ุงูุชุงุฑูุฎ ุงูุฃูู. ูุฑุฌู ุจุฏุก ุงูุนูููุฉ ูุฌุฏุฏุงู ูู ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ.")
        return

    date_one = user_data[user_id]
    
    try:
        date_two = datetime.strptime(message.text.strip(), DATE_FORMAT)
        
        date_delta = date_two - date_one
        
        total_days = abs(date_delta.days)
        
        days = total_days
        weeks = days // 7
        
        months = abs((date_two.year - date_one.year) * 12 + (date_two.month - date_one.month))
        
        years = abs(date_two.year - date_one.year)

        result_message = f'''*๐ ุงููุฑู ุจูู ุงูุชุงุฑูุฎูู ุงููุฑุณูููู: ๐*
---
*๐๏ธ ูุฑู ุนูู ูุฐุง ุงูุชุงุฑูุฎ ุจู:*
*โซ๏ธ ุงูุฃูุงู:* `{days}` ููู
*โซ๏ธ ุงูุฃุณุงุจูุน:* `{weeks}` ุฃุณุจูุน
*โซ๏ธ ุงูุฃุดูุฑ (ุชูุฑูุจู):* `{months}` ุดูุฑ
*โซ๏ธ ุงูุณููุงุช:* `{years}` ุณูุฉ
'''
        
        bot.reply_to(message, result_message, parse_mode="Markdown")
        
        if user_id in user_data:
            del user_data[user_id]
        
    except ValueError:
        error_message = (
            "ุนุฐุฑุงู! ูุจุฏู ุฃู ุตูุบุฉ ุงูุชุงุฑูุฎ ุงูุซุงูู ุบูุฑ ุตุญูุญุฉ โ. \n"
            "ุงูุฑุฌุงุก ุฅุฑุณุงู ุงูุชุงุฑูุฎ ุจุงูุตูุบุฉ ุงููุทููุจุฉ: `ุงูุณูุฉ ุงูุดูุฑ ุงูููู`."
        )
        bot.reply_to(message, error_message)
        bot.register_next_step_handler(message, calculate_difference)


# =========================
# 11. ุฎุฏูุฉ ูู ุถุบุท ูููุงุช ZIP
# =========================

def send_zip_welcome(message):
    """ูุฑุณู ุฑุณุงูุฉ ุชุฑุญูุจูุฉ ุฎุงุตุฉ ุจุฎุฏูุฉ ZIP."""
    welcome_message = (
        'ูุฑุญุจุง ุนุฒูุฒูุ ุฃูุง ููุง ููุณุงุนุฏุชู ูู ูู ุถุบุท ูููุงุช **ZIP**.\n'
        'ููุท ูู ุจุฅุฑุณุงู ููู **.zip** ูุณุฃููู ุจูู ุถุบุทู ูุฅุฑุณุงู ูุญุชููุงุชู ุฅููู.'
    )
    bot.reply_to(message, welcome_message, reply_markup=channel_keyboard, parse_mode='Markdown')

@bot.message_handler(content_types=['document'])
def handle_document(message):
    """ูุนุงูุฌุฉ ุงููุณุชูุฏุงุช ุงููุฑุณูุฉ ูุงูุชุญูู ููุง ุฅุฐุง ูุงูุช ูููุงุช ZIP ููู ุถุบุทูุง."""
    # ุชุฃูุฏ ุฃู ุงูุฑุณุงูุฉ ููุณุช ุฌุฒุกุงู ูู ุนูููุฉ ุฅุถุงูุฉ ูููุฉ ุฌุงุฑูุฉ
    if message.from_user.id in adding_task_state and adding_task_state[message.from_user.id]:
        return # ุชุฌุงูู ุงูููู ุฅุฐุง ูุงู ุงููุณุชุฎุฏู ูู ูุถุน ุฅุถุงูุฉ ูููุฉ

    if message.document.file_name and message.document.file_name.lower().endswith('.zip'):
        msg_waiting = bot.reply_to(message, "ุฌุงุฑู ูุญุต ุงูููู ููู ุงูุถุบุท...")
        
        try:
            file_info = bot.get_file(message.document.file_id)
            dow = bot.download_file(file_info.file_path)
            
            with zipfile.ZipFile(BytesIO(dow)) as zip_ref:
                file_names = [f for f in zip_ref.namelist() if not f.endswith('/')]
                
                if not file_names:
                    bot.edit_message_text("โ ุงูููู ูุง ูุญุชูู ุนูู ูููุงุช ูุงุจูุฉ ููุฅุฑุณุงู (ูุฏ ูููู ูุฌูุฏุงุช ูุงุฑุบุฉ).", message.chat.id, msg_waiting.message_id)
                    return
                
                for file_name in file_names:
                    with zip_ref.open(file_name) as file_in_zip:
                        bot.send_document(
                            message.chat.id,
                            file_in_zip,
                            visible_file_name=file_name
                        )
            
            bot.edit_message_text("โ ุชู ูู ุถุบุท ูุฅุฑุณุงู ุฌููุน ุงููููุงุช ุจูุฌุงุญ.", message.chat.id, msg_waiting.message_id)

        except zipfile.BadZipFile:
            bot.edit_message_text("โ ุญุฏุซ ุฎุทุฃ: ุงูููู ุงูููุฑุณูู ููุณ ููู ZIP ุตุงูุญ ุฃู ุชุงูู.", message.chat.id, msg_waiting.message_id)
        except Exception as e:
            print(f"ุญุฏุซ ุฎุทุฃ ุบูุฑ ูุชููุน: {e}")
            bot.edit_message_text("โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงููุนุงูุฌุฉ. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.", message.chat.id, msg_waiting.message_id)
            
    else:
        pass


# =========================
# 12. ุฏูุงู ูุฅุนุฏุงุฏุงุช ูุงุฆูุฉ ุงูููุงู (TODO List)
# =========================

# --- ูุณุงุนุฏุงุช ูุญูุธ/ูุฑุงุกุฉ ุงูุจูุงูุงุช ---
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with LOCK:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return {}

def save_data(data):
    tmp = DATA_FILE + ".tmp"
    with LOCK:
        with open(tmp, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        os.replace(tmp, DATA_FILE)

def get_user_tasks(user_id):
    data = load_data()
    return data.get(str(user_id), [])

def set_user_tasks(user_id, tasks):
    data = load_data()
    data[str(user_id)] = tasks
    save_data(data)

# --- ุฃุฏูุงุช ูุณุงุนุฏุฉ ููุงุฌูุฉ ุงููุณุชุฎุฏู ---
def tasks_to_message(tasks):
    if not tasks:
        return "ูุงุฆูุฉ ุงูููุงู ูุงุฑุบุฉ."
    lines = ["<b>๐ ูุงุฆูุฉ ููุงูู:</b>\n"]
    for i, t in enumerate(tasks, start=1):
        status = "โ" if t.get("done") else "โป๏ธ"
        text = t.get("text", "")
        lines.append(f"<code>{i}</code>. {status} {text}")
    return "\n".join(lines)

def make_task_list_markup(user_id):
    """ููุดุฆ ุงูุฃุฒุฑุงุฑ ุงููุถููุฉ ููููุงู ุงููุฑุฏูุฉ."""
    tasks = get_user_tasks(user_id)
    markup = InlineKeyboardMarkup()
    for idx, task in enumerate(tasks):
        # ุฒุฑ ูุงุญุฏ ููู ูููุฉ ูุฌูุน ุจูู ุงูุชุจุฏูู ูุงูุญุฐู
        done_text = "โ ููุชูู" if task.get("done") else "โ๏ธ ุฅูุฌุงุฒ"
        markup.row(
            InlineKeyboardButton(done_text, callback_data=f"toggle|{idx}"),
            InlineKeyboardButton("๐๏ธ ุญุฐู", callback_data=f"delete|{idx}")
        )
    return markup

def make_todo_main_markup(user_id):
    """ููุดุฆ ุงูุฃุฒุฑุงุฑ ุงูุฑุฆูุณูุฉ ูุฎุฏูุฉ ุงูููุงู (ุฅุถุงูุฉุ ูุณุญ ุงููู)."""
    markup = InlineKeyboardMarkup()
    tasks = get_user_tasks(user_id)
    
    # ุฏุงุฆูุงู ุฒุฑ ุฅุถุงูุฉ
    markup.row(InlineKeyboardButton("โ ุฅุถุงูุฉ ูููุฉ ุฌุฏูุฏุฉ", callback_data="add_new_task"))
    
    # ุฒุฑ ูุณุญ ุงููู ูุธูุฑ ููุท ุฅุฐุง ูุงูุช ููุงู ููุงู
    if tasks:
        markup.row(InlineKeyboardButton("โ ูุณุญ ูู ุงูููุงู", callback_data="clear_all"))
    
    # ุฅุถุงูุฉ ุฒุฑ ูุนุฑุถ ุงููุงุฆูุฉ ุจุดูู ูููุตู (ุฅุฐุง ูุงู ุงููุณุชุฎุฏู ูุถุบุท ุนูู ุงูุฒุฑ ุงูุฑุฆูุณู)
    if tasks:
        markup.row(InlineKeyboardButton("ุนุฑุถ ูุงุฆูุฉ ุงูููุงู ุงูุญุงููุฉ", callback_data="view_list"))
        
    return markup

def send_task_menu(chat_id, user_id, message_id=None, text=None):
    """ูุฑุณู ุฑุณุงูุฉ ูุงุฆูุฉ ุงูููุงู ุงูุฑุฆูุณูุฉ ูุน ุงูุฃุฒุฑุงุฑ."""
    tasks = get_user_tasks(user_id)
    
    if text is None:
        text = tasks_to_message(tasks) + "\n\n<b>ูุงุฐุง ุชุฑูุฏ ุฃู ุชูุนู ุงูุขูุ</b>"
        
    markup = make_todo_main_markup(user_id)

    if message_id:
        try:
            bot.edit_message_text(text, chat_id, message_id, reply_markup=markup, parse_mode='HTML')
        except Exception:
            # ุฅุฐุง ูุดู ุงูุชุญุฑูุฑ (ูุฃู ุงูุฑุณุงูุฉ ูุฏููุฉ ูุซูุงู)ุ ุฃุฑุณู ุฑุณุงูุฉ ุฌุฏูุฏุฉ
            bot.send_message(chat_id, text, reply_markup=markup, parse_mode='HTML')
    else:
        bot.send_message(chat_id, text, reply_markup=markup, parse_mode='HTML')


def handle_new_task_input(message):
    """ูุชุนุงูู ูุน ุงููุต ุงููุฑุณู ูุฅุถุงูุฉ ูููุฉ."""
    user_id = message.from_user.id
    task_text = message.text.strip()
    
    # ุฅููุงู ุญุงูุฉ ุงูุฅุถุงูุฉ
    adding_task_state[user_id] = False

    if not task_text:
        bot.reply_to(message, "โ ูู ูุชู ุฅุฏุฎุงู ูุต ูููููุฉ. ูุฑุฌู ุงูุจุฏุก ูู ุฌุฏูุฏ ุนุจุฑ ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ.")
        return

    tasks = get_user_tasks(user_id)
    tasks.append({"text": task_text, "done": False, "created_at": int(time.time())})
    set_user_tasks(user_id, tasks)
    
    # ุฅุฑุณุงู ูุงุฆูุฉ ุงูููุงู ุงููุญุฏุซุฉ
    text = f"โ ุชู ุฅุถุงูุฉ ุงููููุฉ: <b>{task_text}</b>\n\n"
    text += tasks_to_message(tasks) + "\n\n<b>ูุงุฐุง ุชุฑูุฏ ุฃู ุชูุนู ุงูุขูุ</b>"

    # ูุฑุณู ุงููุงุฆูุฉ ุงููุญุฏุซุฉ (ููุญุงุฏุซุฉ ุฌุฏูุฏุฉ)
    send_task_menu(message.chat.id, user_id, text=text)

# =========================
# 13. ูุนุงูุฌ ุฌููุน ุงูุฑุณุงุฆู ุงููุตูุฉ
# =========================
@bot.message_handler(func=lambda m: m.text and not m.text.startswith('/'))
def handle_all(message):
    text = message.text.strip()
    user_id = message.from_user.id
    
    # --- ูุนุงูุฌ ุฎุงุต ููุฏุฎู ูููุฉ ุฌุฏูุฏุฉ ---
    if user_id in adding_task_state and adding_task_state[user_id]:
        handle_new_task_input(message)
        return

    # --- ูุนุงูุฌุงุช ุงูุฎุฏูุงุช ุงูุฑุฆูุณูุฉ ---
    if text == "๐ ุงููุฑุขู ุงููุฑูู":
        bot.reply_to(message, "ุฃุฑุณู ุฑูู ุงูุตูุญุฉ:")
        bot.register_next_step_handler(message, lambda m: send_quran_page(m.chat.id, m.text)) 
        return
        
    # ๐ ูุนุงูุฌ ุฒุฑ ุงููุนูููุงุช/ุงูุชุฑุญูุจ
    if text == "โน๏ธ ูุนูููุงุช / ุชุฑุญูุจ":
        info_message = get_current_info()
        bot.reply_to(message, info_message, parse_mode='HTML')
        return

    if text == "๐ ูู ุถุบุท ZIP":
        send_zip_welcome(message)
        return

    if text == "๐ ุงููุฑู ุจูู ุชุงุฑูุฎูู":
        welcome_message = (
            "ูุฑุญุจุงู ุจู! ุฃูุง ุจูุช ูุญุณุงุจ **ุงููุฑู ุจูู ุชุงุฑูุฎูู** ๐.\n"
            "ุฃุฑุณู **ุงูุชุงุฑูุฎ ุงูุฃูู** ุจุงูุตูุบุฉ ุงูุชุงููุฉ:\n"
            "`ุงูุณูุฉ ุงูุดูุฑ ุงูููู`\n"
            "ูุซุงู: `2023 1 1`"
        )
        bot.reply_to(message, welcome_message, parse_mode="Markdown")
        bot.register_next_step_handler(message, get_date_one)
        return

    if text == "โ ุฌุฏูู ุงูุถุฑุจ":
        bot.reply_to(message, "ุฃุฑุณู ุงูุฑูู ูุนุฑุถ ุฌุฏูู ุถุฑุจู:")
        def handle_multiplication(m):
            try:
                n = int(m.text.strip())
                bot.reply_to(m, multiplication_table(n))
            except ValueError:
                bot.reply_to(m, "โ ูุฑุฌู ุฅุฑุณุงู ุฑูู ุตุงูุญ ููุท.")
        
        bot.register_next_step_handler(message, handle_multiplication)
        return

    if text == "๐ ุงุฎุชุตุงุฑ ุฑุงุจุท":
        bot.reply_to(message, "ุฃุฑุณู ุงูุฑุงุจุท ูุงุฎุชุตุงุฑู:")
        bot.register_next_step_handler(message, handle_shortener)
        return

    if text == "๐ฌ ุชุญููู ุชูู ุชูู":
        bot.reply_to(message, "ุฃุฑุณู ุฑุงุจุท ููุฏูู ุชูู ุชูู:")
        bot.register_next_step_handler(message, handle_tiktok)
        return

    if text == "๐ ุงูุชุนุฑู ุนูู ุณูุงุฑุฉ":
    	bot.reply_to(message, "๐ท ุฃุฑุณู ุตูุฑุฉ ุงูุณูุงุฑุฉ ุงููุฑุงุฏ ุงูุชุนุฑู ุนูููุง:")
    	bot.register_next_step_handler(message, handle_car_photo)
    	return
    
    if text == "๐ค ุงุณุฃู ChatGPT":
        bot.reply_to(message, "ุฃุฑุณู ุณุคุงูู:")
        bot.register_next_step_handler(message, handle_gpt)
        return

    # --- ูุนุงูุฌ ูุงุฆูุฉ ุงูููุงู (TODO List) ูู ุงูุฒุฑ ุงูุฑุฆูุณู ---
    if text == "๐ ูุงุฆูุฉ ุงูููุงู":
        send_task_menu(message.chat.id, user_id)
        return

    # --- ุฑุฏูุฏ ุซุงุจุชุฉ ---
    if text in ["ููู ูุทูุฑู", "ูุทูุฑู", "ููู ุงููุทูุฑ"]:
        bot.reply_to(message, "๐ค ุชูุฌุฑุงู :- @altaee_z\n๐ ูููุนู : www.ali-Altaee.free.nf")
        return

    # --- ุฑุณุงูุฉ ุงูุชุฑุงุถูุฉ ---
    bot.reply_to(message, "ุนุฐุฑุงูุ ูู ุฃููู ุทูุจู. ูุฑุฌู ุงุฎุชูุงุฑ ุฎุฏูุฉ ูู ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ.")


# =========================
# 14. ูุนุงูุฌ ุงูู CallbackQuery ุงูููุญุฏ
# =========================
@bot.callback_query_handler(func=lambda call: True)
def unified_callback_handler(call):
    data = call.data
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    
    # ------------------
    # ูุนุงูุฌ ุงููุฑุขู ุงููุฑูู
    # ------------------
    if data == 'couu':
        bot.answer_callback_query(call.id, text='ูุฐุง ุฒุฑ ูุนุฑุถ ููู ุงูุนุฏุฏ ููุท')
        return
    elif data.startswith('quran|'):
        try:
            num = int(data.split('|')[1])
            if not (1 <= num <= 604):
                bot.answer_callback_query(call.id, text='ูุตูุช ุฅูู ุจุฏุงูุฉ ุฃู ููุงูุฉ ุงููุตุญู.')
                return

            url = f"https://quran.ksu.edu.sa/png_big/{num}.png"
            keyboard = types.InlineKeyboardMarkup()
            keyboard.row(types.InlineKeyboardButton(text=f"โข ุตูุญุฉ {num} โข", callback_data="couu"))
            keyboard.row(
                types.InlineKeyboardButton(text="โ ุตูุญุฉ ุงูุณุงุจูุฉ", callback_data=f"quran|{num - 1}"),
                types.InlineKeyboardButton(text="ุตูุญุฉ ุงูุชุงููุฉ โถ", callback_data=f"quran|{num + 1}"),
            )
            bot.edit_message_media(
                types.InputMediaPhoto(url),
                chat_id,
                message_id,
                reply_markup=keyboard
            )
        except Exception:
            bot.answer_callback_query(call.id, text='ูุง ูููู ุงูุชุจุฏูู ููุฐู ุงูุตูุญุฉ.')
            
    # -----------------------
    # ูุนุงูุฌ ูุงุฆูุฉ ุงูููุงู (TODO)
    # -----------------------
    elif data == "add_new_task":
        # ุชุนููู ุญุงูุฉ ุงููุณุชุฎุฏู ููุฅุถุงูุฉ
        adding_task_state[user_id] = True
        
        # ุฅุฒุงูุฉ ุงูุฃุฒุฑุงุฑ ูุฅุฑุณุงู ุฑุณุงูุฉ ุชุทูุจ ูุต ุงููููุฉ
        text = "๐ ุฃุฑุณู ุงูุขู **ูุต ุงููููุฉ** ุงูุชู ุชุฑูุฏ ุฅุถุงูุชูุง (ูุซูุงู: ุดุฑุงุก ุงูุฎุจุฒ)."
        try:
            bot.edit_message_text(text, chat_id, message_id, reply_markup=None, parse_mode='Markdown')
            bot.answer_callback_query(call.id, "ุฃุฑุณู ูุต ุงููููุฉ ุงูุขู.")
        except Exception:
            bot.send_message(chat_id, text, reply_markup=None, parse_mode='Markdown')
            bot.answer_callback_query(call.id, "ุฃุฑุณู ูุต ุงููููุฉ ุงูุขู.")

    elif data == "view_list":
        # ุนุฑุถ ูุงุฆูุฉ ุงูููุงู ูุน ุฃุฒุฑุงุฑ ุงูุชุญูู ุงููุฑุฏูุฉ
        tasks = get_user_tasks(user_id)
        if not tasks:
            bot.answer_callback_query(call.id, "ุงููุงุฆูุฉ ูุงุฑุบุฉุ ุงุณุชุฎุฏู 'ุฅุถุงูุฉ ูููุฉ'.")
            send_task_menu(chat_id, user_id, message_id)
            return

        text = "<b>ุฅุฏุงุฑุฉ ุงูููุงู ุงููุฑุฏูุฉ:</b>"
        text += tasks_to_message(tasks)
        markup = make_task_list_markup(user_id)
        
        # ุฅุถุงูุฉ ุฒุฑ ููุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ ููููุงู
        markup.row(InlineKeyboardButton("๐ ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ", callback_data="todo_main_menu"))
        
        try:
            bot.edit_message_text(text, chat_id, message_id, reply_markup=markup, parse_mode='HTML')
            bot.answer_callback_query(call.id, "ุชู ุนุฑุถ ุงูููุงู")
        except Exception:
            bot.send_message(chat_id, text, reply_markup=markup, parse_mode='HTML')
            bot.answer_callback_query(call.id, "ุชู ุนุฑุถ ุงูููุงู")
            
    elif data == "todo_main_menu":
        # ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ ููููุงู
        send_task_menu(chat_id, user_id, message_id)
        bot.answer_callback_query(call.id, "ุชู ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ")

    elif data.startswith("toggle|"):
        idx = int(data.split("|",1)[1])
        tasks = get_user_tasks(user_id)
        if 0 <= idx < len(tasks):
            tasks[idx]['done'] = not tasks[idx].get('done', False)
            set_user_tasks(user_id, tasks)
            bot.answer_callback_query(call.id, "ุชู ุชุญุฏูุซ ุญุงูุฉ ุงููููุฉ")
            
            # ุชุญุฏูุซ ุนุฑุถ ุงูููุงู ุงููุฑุฏูุฉ
            text = "<b>ุฅุฏุงุฑุฉ ุงูููุงู ุงููุฑุฏูุฉ:</b>"
            text += tasks_to_message(tasks)
            markup = make_task_list_markup(user_id)
            markup.row(InlineKeyboardButton("๐ ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ", callback_data="todo_main_menu"))

            try:
                bot.edit_message_text(text, chat_id, message_id, reply_markup=markup, parse_mode='HTML')
            except Exception:
                 # ูู ุญุงูุฉ ุงูุชุจุฏูู ูู ูุงุฆูุฉ ุงูููุงู ุงูุฑุฆูุณูุฉ (ูุฏ ูุญุฏุซ ุฎุทุฃ ุชุญุฑูุฑ)
                send_task_menu(chat_id, user_id, text="โ ุชู ุชุญุฏูุซ ุญุงูุฉ ุงููููุฉ ุจูุฌุงุญ.")
        else:
            bot.answer_callback_query(call.id, "ุงููููุฉ ุบูุฑ ููุฌูุฏุฉ")
            
    elif data.startswith("delete|"):
        idx = int(data.split("|",1)[1])
        tasks = get_user_tasks(user_id)
        if 0 <= idx < len(tasks):
            removed_task = tasks.pop(idx).get('text')
            set_user_tasks(user_id, tasks)
            bot.answer_callback_query(call.id, "ุชู ุญุฐู ุงููููุฉ")
            
            # ุชุญุฏูุซ ุนุฑุถ ุงูููุงู ุงููุฑุฏูุฉ
            text = "<b>ุฅุฏุงุฑุฉ ุงูููุงู ุงููุฑุฏูุฉ:</b>"
            text += tasks_to_message(tasks)
            markup = make_task_list_markup(user_id)
            markup.row(InlineKeyboardButton("๐ ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ", callback_data="todo_main_menu"))
            
            if not tasks:
                 # ุฅุฐุง ุฃุตุจุญุช ุงููุงุฆูุฉ ูุงุฑุบุฉุ ูุฑุฌุน ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ
                send_task_menu(chat_id, user_id, message_id)
            else:
                try:
                    bot.edit_message_text(text, chat_id, message_id, reply_markup=markup, parse_mode='HTML')
                except Exception:
                     # ูู ุญุงูุฉ ุงูุญุฐู ูู ูุงุฆูุฉ ุงูููุงู ุงูุฑุฆูุณูุฉ
                    send_task_menu(chat_id, user_id, text=f"๐๏ธ ุชู ุญุฐู: <b>{removed_task}</b>")
        else:
            bot.answer_callback_query(call.id, "ุงููููุฉ ุบูุฑ ููุฌูุฏุฉ")
            
    elif data == "clear_all":
        set_user_tasks(user_id, [])
        bot.answer_callback_query(call.id, "ุชู ูุณุญ ูู ุงูููุงู")
        send_task_menu(chat_id, user_id, message_id, text="ุชู ูุณุญ ูู ุงูููุงู. ๐\n\n<b>ูุงุฐุง ุชุฑูุฏ ุฃู ุชูุนู ุงูุขูุ</b>")


# =========================
# 15. ุชุดุบูู ุงูุจูุช
# =========================
if __name__ == '__main__':
    print("ุงูุจูุช ุจุฏุฃ ุงูุนูู...")
    bot.infinity_polling()
